{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\quickquack\\\\QQLogin\\\\screens\\\\Login.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { useFonts } from 'expo-font';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Formik } from 'formik';\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nvar serverIp = '192.168.1.51';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, StyledInputLabel, StyledTextInput, StyledButton, RightIcon, Colors, ButtonText, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent, ExtraViewRight } from \"./../components/styles\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingWrapper from \"../components/KBWrapper\";\nvar primary = Colors.primary,\n    yellow = Colors.yellow,\n    background = Colors.background,\n    lightgray = Colors.lightgray,\n    darkgray = Colors.darkgray,\n    black = Colors.black;\n\nvar storedToken = function storedToken(value) {\n  return _regeneratorRuntime.async(function storedToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', value));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0.message);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar sendToDB = function sendToDB(body) {\n  var response, parseRes;\n  return _regeneratorRuntime.async(function sendToDB$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('http://' + serverIp + ':5000/auth/login', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n          }));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          parseRes = _context2.sent;\n\n          if (!parseRes.token) {\n            storedToken('');\n          } else {\n            storedToken(parseRes.token);\n          }\n\n          _context2.next = 13;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0.message);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  return React.createElement(StyledContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    style: \"yellow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), React.createElement(InnerContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, React.createElement(PageTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Log In\"), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      body = {\n        email: values.email,\n        password: values.password\n      };\n      sendToDB(body);\n      navigation.navigate('TabNav', {\n        Screen: 'Feed'\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values;\n    return React.createElement(StyledFormArea, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, React.createElement(MyTextInput, {\n      label: \"\",\n      icon: \"\",\n      placeholder: \"Institution Email\",\n      placeholderTextColor: darkgray,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      selectionColor: \"#FFCC15\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }), React.createElement(MyTextInput, {\n      label: \"\",\n      icon: \"\",\n      placeholder: \"Password\",\n      placeholderTextColor: darkgray,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: hidePassword,\n      isPassword: true,\n      hidePassword: hidePassword,\n      setHidePassword: setHidePassword,\n      selectionColor: \"#FFCC15\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }), React.createElement(MsgBox, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }), React.createElement(StyledButton, {\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, React.createElement(ButtonText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, \"Log In\")), React.createElement(StyledButton, {\n      google: true,\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, React.createElement(Fontisto, {\n      name: \"google\",\n      color: primary,\n      size: 25,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }), React.createElement(ButtonText, {\n      google: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, \"Log in with Google\")), React.createElement(ExtraView, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, React.createElement(TextLink, {\n      onPress: function onPress() {\n        return navigation.navigate('Signup');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, React.createElement(TextLinkContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, \"Forgot Your Password?\"))));\n  })));\n};\n\nvar MyTextInput = function MyTextInput(_ref3) {\n  var label = _ref3.label,\n      icon = _ref3.icon,\n      isPassword = _ref3.isPassword,\n      hidePassword = _ref3.hidePassword,\n      setHidePassword = _ref3.setHidePassword,\n      props = _objectWithoutProperties(_ref3, _excluded);\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, React.createElement(StyledInputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \" \", label, \" \"), React.createElement(StyledTextInput, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  })), isPassword && React.createElement(RightIcon, {\n    onPress: function onPress() {\n      setHidePassword(!hidePassword);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: hidePassword ? 'md-eye-off' : 'md-eye',\n    size: 30,\n    color: darkgray,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Login;\nexport { serverIp };","map":{"version":3,"sources":["C:/Users/Nick/Documents/GitHub/quickquack/QQLogin/screens/Login.js"],"names":["React","useState","StatusBar","useFonts","AsyncStorage","Formik","Octicons","Ionicons","Fontisto","serverIp","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","StyledInputLabel","StyledTextInput","StyledButton","RightIcon","Colors","ButtonText","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","ExtraViewRight","KeyboardAvoidingWrapper","primary","yellow","background","lightgray","darkgray","black","storedToken","value","setItem","console","error","message","sendToDB","body","fetch","method","headers","JSON","stringify","response","json","parseRes","token","Login","navigation","hidePassword","setHidePassword","email","password","values","navigate","Screen","handleChange","handleBlur","handleSubmit","MyTextInput","label","icon","isPassword","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { useFonts } from 'expo-font';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n//formik\r\nimport { Formik } from 'formik';\r\n\r\n//local storage\r\n\r\n//icons\r\n\r\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\r\n\r\n//IP (WHEN TESTING, CHANGE TO YOUR LOCAL IPV4 ADDRESS)\r\nconst serverIp = '192.168.1.51';\r\n\r\nimport {\r\n  StyledContainer,\r\n  InnerContainer,\r\n  PageLogo,\r\n  PageTitle,\r\n  SubTitle,\r\n  StyledFormArea,\r\n  StyledInputLabel,\r\n  StyledTextInput,\r\n  StyledButton,\r\n  RightIcon,\r\n  Colors,\r\n  ButtonText,\r\n  MsgBox,\r\n  Line,\r\n  ExtraView,\r\n  ExtraText,\r\n  TextLink,\r\n  TextLinkContent,\r\n  ExtraViewRight,\r\n} from './../components/styles';\r\n\r\nimport { Button, View } from 'react-native';\r\n\r\nimport KeyboardAvoidingWrapper from '../components/KBWrapper';\r\n\r\n//colors\r\nconst { primary, yellow, background, lightgray, darkgray, black } = Colors;\r\n\r\n//Using Async Storage to store token JSON object locally as string\r\nconst storedToken = async (value) => {\r\n  try {\r\n    await AsyncStorage.setItem('token', value);\r\n    //console.log('Inserted Token:  ' + value);\r\n  } catch (error) {\r\n    // saving error\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\n//Communicating with the database to authenticate login\r\nconst sendToDB = async (body) => {\r\n  try {\r\n    // Update server with user's registration information\r\n    const response = await fetch('http://' + serverIp + ':5000/auth/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    const parseRes = await response.json();\r\n    if (!parseRes.token) {\r\n      //console.log(parseRes.token);\r\n      storedToken('');\r\n    } else {\r\n      storedToken(parseRes.token);\r\n    }\r\n    //Store to local storage\r\n    //storedToken(parseRes.token);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nconst Login = ({ navigation }) => {\r\n  const [hidePassword, setHidePassword] = useState(true);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      {/* //keyboardavoidingwrapper added in, styledcontainer used to be here wrapping the overall thing */}\r\n      {/* <KeyboardAvoidingWrapper> */}\r\n      <StatusBar style=\"yellow\" />\r\n      <InnerContainer>\r\n        {/* removed/commented InnerContainer, attempted to move into KBWrapper */}\r\n        <PageTitle>Log In</PageTitle>\r\n\r\n        <Formik\r\n          initialValues={{ email: '', password: '' }}\r\n          onSubmit={(values) => {\r\n            //send values to database on submit\r\n            body = {\r\n              email: values.email,\r\n              password: values.password,\r\n            };\r\n\r\n            sendToDB(body);\r\n            navigation.navigate('TabNav', {Screen: 'Feed'});\r\n          }}\r\n        >\r\n          {({ handleChange, handleBlur, handleSubmit, values }) => (\r\n            <StyledFormArea>\r\n              <MyTextInput\r\n                label=\"\"\r\n                icon=\"\"\r\n                placeholder=\"Institution Email\"\r\n                placeholderTextColor={darkgray}\r\n                onChangeText={handleChange('email')}\r\n                onBlur={handleBlur('email')}\r\n                value={values.email}\r\n                keyboardType=\"email-address\"\r\n                selectionColor=\"#FFCC15\"\r\n              />\r\n\r\n              <MyTextInput\r\n                label=\"\"\r\n                icon=\"\"\r\n                placeholder=\"Password\"\r\n                placeholderTextColor={darkgray}\r\n                onChangeText={handleChange('password')}\r\n                onBlur={handleBlur('password')}\r\n                value={values.password}\r\n                secureTextEntry={hidePassword}\r\n                isPassword={true}\r\n                hidePassword={hidePassword}\r\n                setHidePassword={setHidePassword}\r\n                selectionColor=\"#FFCC15\"\r\n              />\r\n              <MsgBox></MsgBox>\r\n              <StyledButton onPress={handleSubmit}>\r\n                <ButtonText>Log In</ButtonText>\r\n              </StyledButton>\r\n              <StyledButton google={true} onPress={handleSubmit}>\r\n                <Fontisto name=\"google\" color={primary} size={25} />\r\n                <ButtonText google={true}>Log in with Google</ButtonText>\r\n              </StyledButton>\r\n              <ExtraView>\r\n                <TextLink onPress={() => navigation.navigate('Signup')}>\r\n                  <TextLinkContent>Forgot Your Password?</TextLinkContent>\r\n                </TextLink>\r\n              </ExtraView>\r\n            </StyledFormArea>\r\n          )}\r\n        </Formik>\r\n      </InnerContainer>\r\n      {/* </KeyboardAvoidingWrapper> */}\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, ...props }) => {\r\n  return (\r\n    <View>\r\n      <StyledInputLabel> {label} </StyledInputLabel>\r\n      <StyledTextInput {...props} />\r\n      {isPassword && (\r\n        <RightIcon\r\n          onPress={() => {\r\n            setHidePassword(!hidePassword);\r\n          }}\r\n        >\r\n          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkgray} />\r\n        </RightIcon>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n//testing purposes, so don't have to redefine across multiple files\r\nexport { serverIp };\r\n"]},"metadata":{},"sourceType":"module"}