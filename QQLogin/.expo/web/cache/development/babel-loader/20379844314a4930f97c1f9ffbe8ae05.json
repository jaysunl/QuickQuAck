{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"label\", \"icon\", \"isPassword\", \"hidePassword\", \"setHidePassword\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Documents\\\\GitHub\\\\quickquack\\\\QQLogin\\\\screens\\\\CreatePost.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { serverIp } from \"./Login.js\";\nimport { Formik, Field, Form } from 'formik';\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\nimport { StyledContainer, InnerContainer, PageLogo, PageTitle, SubTitle, StyledFormArea, LeftIcon, StyledInputLabel, StyledTextInput, StyledButton, RightIcon, Colors, ButtonText, MsgBox, Line, ExtraView, ExtraText, TextLink, TextLinkContent, ExtraViewRight, StyledPostArea, StyledPostInput } from \"./../components/styles\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport KeyboardAvoidingWrapper from \"../components/KBWrapper\";\nvar primary = Colors.primary,\n    yellow = Colors.yellow,\n    background = Colors.background,\n    lightgray = Colors.lightgray,\n    darkgray = Colors.darkgray,\n    black = Colors.black;\n\nvar CreatePost = function CreatePost(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      composePost = _useState2[0],\n      setComposePost = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      agree = _useState4[0],\n      setAgree = _useState4[1];\n\n  var JWTtoken = '';\n\n  var getJWT = function getJWT() {\n    return _regeneratorRuntime.async(function getJWT$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token').then(function (token) {\n              JWTtoken = token;\n            }));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0.message);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var sendToDB = function sendToDB(body) {\n    var response, parseRes;\n    return _regeneratorRuntime.async(function sendToDB$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getJWT());\n\n          case 2:\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch('http://' + serverIp + ':5000/feed/create-post', {\n              method: 'POST',\n              headers: {\n                token: JWTtoken\n              },\n              body: JSON.stringify(body)\n            }));\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 8:\n            parseRes = _context2.sent;\n            console.log(parseRes);\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(_context2.t0.message);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n\n  return React.createElement(Modal, {\n    transparent: true,\n    visible: true,\n    animationType: \"slide\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, React.createElement(KeyboardAvoidingWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, React.createElement(StyledContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, React.createElement(StatusBar, {\n    style: \"black\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), React.createElement(InnerContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(PageTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"New Post\"), React.createElement(SubTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), React.createElement(Formik, {\n    initialValues: {\n      postText: '',\n      postId: ''\n    },\n    onSubmit: function onSubmit(values) {\n      body = {\n        postText: 'Title: ' + values.postText + 'Content: ' + values.postTitle,\n        postId: values.postId\n      };\n      sendToDB(body);\n      navigation.navigate('PostView');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values;\n    return React.createElement(StyledPostArea, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, React.createElement(MyTextInput, {\n      placeholder: \"Post Title\",\n      style: {},\n      placeholderTextColor: darkgray,\n      onChangeText: handleChange('postTitle'),\n      onBlur: handleBlur('postTitle'),\n      value: values.postTitle,\n      selectionColor: \"#FFCC15\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }), React.createElement(MyTextInput, {\n      placeholder: \"Post Text\",\n      style: {},\n      placeholderTextColor: darkgray,\n      onChangeText: handleChange('postText'),\n      onBlur: handleBlur('postText'),\n      value: values.postText,\n      selectionColor: \"#FFCC15\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }), React.createElement(StyledButton, {\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, React.createElement(ButtonText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, \"Create Post\")), React.createElement(StyledButton, {\n      onPress: function onPress() {\n        return navigation.navigate('Login');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, React.createElement(ButtonText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, \"Back\")), React.createElement(Line, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }));\n  })))));\n};\n\nvar MyTextInput = function MyTextInput(_ref3) {\n  var label = _ref3.label,\n      icon = _ref3.icon,\n      isPassword = _ref3.isPassword,\n      hidePassword = _ref3.hidePassword,\n      setHidePassword = _ref3.setHidePassword,\n      props = _objectWithoutProperties(_ref3, _excluded);\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, React.createElement(StyledInputLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, \" \", label, \" \"), React.createElement(StyledPostInput, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  })), isPassword && React.createElement(RightIcon, {\n    onPress: function onPress() {\n      setHidePassword(!hidePassword);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: hidePassword ? 'md-eye-off' : 'md-eye',\n    size: 30,\n    color: darkgray,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default CreatePost;","map":{"version":3,"sources":["C:/Users/Nick/Documents/GitHub/quickquack/QQLogin/screens/CreatePost.js"],"names":["React","useState","StatusBar","AsyncStorage","serverIp","Formik","Field","Form","Octicons","Ionicons","Fontisto","StyledContainer","InnerContainer","PageLogo","PageTitle","SubTitle","StyledFormArea","LeftIcon","StyledInputLabel","StyledTextInput","StyledButton","RightIcon","Colors","ButtonText","MsgBox","Line","ExtraView","ExtraText","TextLink","TextLinkContent","ExtraViewRight","StyledPostArea","StyledPostInput","KeyboardAvoidingWrapper","primary","yellow","background","lightgray","darkgray","black","CreatePost","navigation","composePost","setComposePost","agree","setAgree","JWTtoken","getJWT","getItem","then","token","console","error","message","sendToDB","body","fetch","method","headers","JSON","stringify","response","text","parseRes","log","postText","postId","values","postTitle","navigate","handleChange","handleBlur","handleSubmit","MyTextInput","label","icon","isPassword","hidePassword","setHidePassword","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n//Testing purposes, change serverIP in login.js to your local IPV4 address\r\nimport { serverIp } from './Login.js';\r\n\r\n//formik\r\nimport { Formik, Field, Form } from 'formik';\r\n\r\n//icons\r\n\r\nimport { Octicons, Ionicons, Fontisto } from '@expo/vector-icons';\r\n\r\nimport {\r\n  StyledContainer,\r\n  InnerContainer,\r\n  PageLogo,\r\n  PageTitle,\r\n  SubTitle,\r\n  StyledFormArea,\r\n  LeftIcon,\r\n  StyledInputLabel,\r\n  StyledTextInput,\r\n  StyledButton,\r\n  RightIcon,\r\n  Colors,\r\n  ButtonText,\r\n  MsgBox,\r\n  Line,\r\n  ExtraView,\r\n  ExtraText,\r\n  TextLink,\r\n  TextLinkContent,\r\n  ExtraViewRight,\r\n  StyledPostArea,\r\n  StyledPostInput,\r\n} from './../components/styles';\r\n\r\nimport { Button, View, Modal } from 'react-native';\r\nimport KeyboardAvoidingWrapper from '../components/KBWrapper';\r\n\r\n//colors\r\nconst { primary, yellow, background, lightgray, darkgray, black } = Colors;\r\n\r\nconst CreatePost = ({ navigation }) => {\r\n  const [composePost, setComposePost] = useState(false);\r\n  const [agree, setAgree] = useState(false);\r\n\r\n  var JWTtoken = '';\r\n\r\n  //Getting JWT from local storage, must exist otherwise user can't be on this page\r\n\r\n  const getJWT = async () => {\r\n    try {\r\n      await AsyncStorage.getItem('token').then((token) => {\r\n        // console.log('Retrieved Token: ' + token);\r\n        JWTtoken = token;\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  //communicate registration information with the database\r\n  const sendToDB = async (body) => {\r\n    await getJWT();\r\n    try {\r\n      //console.log('Sent Token:      ' + JWTtoken);\r\n      // Update server with user's registration information\r\n      const response = await fetch('http://' + serverIp + ':5000/feed/create-post', {\r\n        method: 'POST',\r\n        headers: { token: JWTtoken },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      const parseRes = await response.text();\r\n\r\n      console.log(parseRes);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n        transparent = {true}\r\n        visible = {true}\r\n        animationType = 'slide'\r\n        >\r\n    <KeyboardAvoidingWrapper>\r\n      <StyledContainer>\r\n        <StatusBar style=\"black\" />\r\n        <InnerContainer>\r\n       \r\n          <PageTitle>New Post</PageTitle>\r\n\r\n          <SubTitle></SubTitle>\r\n          <Formik\r\n            initialValues={{\r\n              postText: '',\r\n              postId: '',\r\n            }}\r\n            onSubmit={(values) => {\r\n              //Setting up information to send to database\r\n              body = {\r\n                postText: 'Title: ' + values.postText + 'Content: ' + values.postTitle,\r\n                postId: values.postId,\r\n              };\r\n\r\n              sendToDB(body);\r\n              navigation.navigate('PostView');\r\n            }}\r\n          >\r\n            {({ handleChange, handleBlur, handleSubmit, values }) => (\r\n              <StyledPostArea>\r\n                <MyTextInput\r\n                  placeholder=\"Post Title\"\r\n                  style={{}}\r\n                  placeholderTextColor={darkgray}\r\n                  onChangeText={handleChange('postTitle')}\r\n                  onBlur={handleBlur('postTitle')}\r\n                  value={values.postTitle}\r\n                  selectionColor=\"#FFCC15\"\r\n                />\r\n\r\n                <MyTextInput\r\n\r\n                  placeholder=\"Post Text\"\r\n                  style={{}}\r\n                  placeholderTextColor={darkgray}\r\n                  onChangeText={handleChange('postText')}\r\n                  onBlur={handleBlur('postText')}\r\n                  value={values.postText}\r\n                  selectionColor=\"#FFCC15\"\r\n                />\r\n\r\n                <StyledButton onPress={handleSubmit}>\r\n                  <ButtonText>Create Post</ButtonText>\r\n                </StyledButton>\r\n                <StyledButton onPress={() => navigation.navigate('Login')}>\r\n                  <ButtonText>Back</ButtonText>\r\n                </StyledButton>\r\n                <Line />\r\n              </StyledPostArea>\r\n            )}\r\n          </Formik>\r\n         \r\n        </InnerContainer>\r\n      </StyledContainer>\r\n    </KeyboardAvoidingWrapper>\r\n     </Modal>\r\n  );\r\n};\r\n\r\nconst MyTextInput = ({ label, icon, isPassword, hidePassword, setHidePassword, ...props }) => {\r\n  return (\r\n    <View>\r\n      <StyledInputLabel> {label} </StyledInputLabel>\r\n      <StyledPostInput {...props} />\r\n      {isPassword && (\r\n        <RightIcon\r\n          onPress={() => {\r\n            setHidePassword(!hidePassword);\r\n          }}\r\n        >\r\n          <Ionicons name={hidePassword ? 'md-eye-off' : 'md-eye'} size={30} color={darkgray} />\r\n        </RightIcon>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n"]},"metadata":{},"sourceType":"module"}